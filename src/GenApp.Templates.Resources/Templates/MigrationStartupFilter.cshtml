@foreach (var usg in Model.Usings)
{
@:using @usg;
}

namespace @Model.Namespace;
public class MigrationStartupFilter<TContext> : IStartupFilter
    where TContext : DbContext
{
    private readonly ICustomDbMigrator _dbMigrator;

    public MigrationStartupFilter(ICustomDbMigrator dbMigrator)
    {
        _dbMigrator = dbMigrator;
    }

    public Action<IApplicationBuilder> Configure(Action<IApplicationBuilder> next)
    {
        return app =>
        {
            using (var scope = app.ApplicationServices.GetRequiredService<IServiceScopeFactory>().CreateScope())
            {
                foreach(var context in scope.ServiceProvider.GetServices<TContext>())
                {
                    Console.WriteLine("Start processing DbContext");
                    if (context.Database.IsRelational())
                    {
                        var retryCount = 0;
                        var maxRetries = 5;
                        while (retryCount <= maxRetries)
                        {
                            try
                            {
                                Console.WriteLine("Start apply migration");
                                // context.Database.Migrate();
                                Task.WaitAll(_dbMigrator.MigrateAsync(context, CancellationToken.None));
                                break;
                            }
                            catch (Exception e)
                            {
                                if (retryCount == maxRetries)
                                {
                                    throw;
                                }

                                Console.WriteLine($"{e.Message}. Trying again in 10 seconds...");
                                Thread.Sleep(10000);
                                retryCount++;
                            }
                        }
                    }
                }
            }

            next(app);
        };
    }
}