@foreach (var usg in Model.Usings)
{
@:using @usg;
}

namespace @Model.Namespace;

[Route("api/[controller]")]
[ApiController]
public class @Model.ControllerName : ControllerBase
{
    private readonly IMapper _mapper;
    private readonly @Model.ServiceInterfaceName _service;
    private readonly ILogger<@Model.ControllerName> _logger;

    public @(Model.ControllerName)(IMapper mapper, @Model.ServiceInterfaceName service, ILogger<@Model.ControllerName> logger)
    {
        _mapper = mapper;
        _service = service;
        _logger = logger;
    }

    [HttpGet]
    public async Task<ActionResult<PagedResponse<@Model.ResponseModelName>>> GetManyAsync(
        [FromQuery] QueryParameters parameters, CancellationToken token)
    {
        var model = await _service.GetManyAsync(parameters, token);
        var response = new PagedResponse<@Model.ResponseModelName>
        {
            Items = _mapper.Map<IEnumerable<@Model.ResponseModelName>>(model.Items),
            TotalCount = model.TotalCount,
            TotalPageCount = model.TotalPageCount,
        };

        return Ok(response);
    }

    [HttpGet("{id}")]
    public async Task<ActionResult<@Model.ResponseModelName>> GetByIdAsync(@Model.KeyType id, CancellationToken token)
    {
        var model = await _service.GetByIdAsync(id, token);
        return Ok(_mapper.Map<@Model.ResponseModelName>(model));
    }

    [HttpPost]
    public async Task<ActionResult> CreateAsync(@Model.CreateRequestName request, CancellationToken token)
    {
        var model = _mapper.Map<@Model.CommandModelName>(request);
        await _service.CreateAsync(model, token);
        return NoContent();
    }

    [HttpPut("{id}")]
    public async Task<ActionResult> UpdateAsync(@Model.KeyType id, @Model.UpdateRequestName request, CancellationToken token)
    {
        if (id != request.Id)
        {
            return BadRequest();
        }

        var model = _mapper.Map<@Model.CommandModelName>(request);
        await _service.UpdateAsync(model, token);
        return NoContent();
    }

    [HttpDelete]
    public async Task<ActionResult> DeleteAsync(@Model.KeyType id, CancellationToken token)
    {
        await _service.DeleteAsync(id, token);
        return NoContent();
    }
}
