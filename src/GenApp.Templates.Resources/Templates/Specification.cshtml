@foreach (var usg in Model.Usings)
{
@:using @usg;
}

namespace @Model.Namespace;
public abstract class Specification<T, TId>
    where T : IBaseEntity<TId>
{
    public abstract Expression<Func<T, bool>> Expression { get; }

    public static Expression<Func<T, bool>> True()
    {
        return input => true;
    }

    public static Expression<Func<T, bool>> False()
    {
        return input => false;
    }

    public static Specification<T, TId> operator &(Specification<T, TId> spec1, Specification<T, TId> spec2) => new AndSpecification<T, TId>(spec1, spec2);

    public static Specification<T, TId> operator |(Specification<T, TId> spec1, Specification<T, TId> spec2) => new OrSpecification<T, TId>(spec1, spec2);

    public static Specification<T, TId> operator !(Specification<T, TId> spec1) => new NotSpecification<T, TId>(spec1);
}